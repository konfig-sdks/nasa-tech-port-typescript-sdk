/* tslint:disable */
/* eslint-disable */
/*
TechPort

TechPort RESTful API

The version of the OpenAPI document: 3.13.2
Contact: hq-techport@mail.nasa.gov

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OrganizationGetInformationResponse } from '../models';
// @ts-ignore
import { OrganizationGetListByNameResponse } from '../models';
// @ts-ignore
import { OrganizationListTypesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an organization and its information.
         * @param {number} organizationId Organization Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (organizationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getInformation', 'organizationId', organizationId)
            const localVarPath = `/api/organizations/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId !== undefined ? organizationId : `-organizationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations/{organizationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of organizations that match a given name.
         * @param {string} [name] Organization Name to filter on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByName: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of available organization types, including set-aside and MSI types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/organizations/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations/types',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get an organization and its information.
         * @param {OrganizationApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(requestParameters: OrganizationApiGetInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationGetInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(requestParameters.organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of organizations that match a given name.
         * @param {OrganizationApiGetListByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListByName(requestParameters: OrganizationApiGetListByNameRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationGetListByNameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListByName(requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of available organization types, including set-aside and MSI types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationListTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         * Get an organization and its information.
         * @param {OrganizationApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(requestParameters: OrganizationApiGetInformationRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationGetInformationResponse> {
            return localVarFp.getInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of organizations that match a given name.
         * @param {OrganizationApiGetListByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByName(requestParameters: OrganizationApiGetListByNameRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OrganizationGetListByNameResponse> {
            return localVarFp.getListByName(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of available organization types, including set-aside and MSI types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes(options?: AxiosRequestConfig): AxiosPromise<OrganizationListTypesResponse> {
            return localVarFp.listTypes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInformation operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetInformationRequest
 */
export type OrganizationApiGetInformationRequest = {
    
    /**
    * Organization Id.
    * @type {number}
    * @memberof OrganizationApiGetInformation
    */
    readonly organizationId: number
    
}

/**
 * Request parameters for getListByName operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetListByNameRequest
 */
export type OrganizationApiGetListByNameRequest = {
    
    /**
    * Organization Name to filter on.
    * @type {string}
    * @memberof OrganizationApiGetListByName
    */
    readonly name?: string
    
}

/**
 * OrganizationApiGenerated - object-oriented interface
 * @export
 * @class OrganizationApiGenerated
 * @extends {BaseAPI}
 */
export class OrganizationApiGenerated extends BaseAPI {
    /**
     * Get an organization and its information.
     * @param {OrganizationApiGetInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getInformation(requestParameters: OrganizationApiGetInformationRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of organizations that match a given name.
     * @param {OrganizationApiGetListByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getListByName(requestParameters: OrganizationApiGetListByNameRequest = {}, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getListByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of available organization types, including set-aside and MSI types.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public listTypes(options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).listTypes(options).then((request) => request(this.axios, this.basePath));
    }
}
